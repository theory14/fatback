#!/bin/sh 
#
# fatback
#
# simple backup program
# Author:  Chris Gordon
# (c) 2005
#
# Nov 2009:  Implemented the following:
#	- Support for Wake On Lan
#	- Exclude files supported

#
# VARIABLES
#

# Directory holding all of the configuration files
CONF_DIR=/usr/local/fatback/etc
DATE=`date +%Y%m%d`

#
# FUNCTIONS
#

# print simple usage information.
function usage ()
{
	echo "Usage:"
	echo "  `basename $0` <backup-set>"
	exit
}

# this does our logging.
function logit()
{
	LEVEL=$1
	MESSAGE=$2

	if [ $LEVEL -le $DEBUGLEVEL ]; then
		if [ $LOGFILE == "syslog" ]; then
			$LOGGER -t `basename $0` -- $MESSAGE
		else
			echo $MESSAGE >> $LOGFILE
		fi
	fi
}

# clean up the old incremental backup files that are no longer needed
function cleanold ()
{
	LASTDATE=`date --date="$KEEPERS days ago" +%Y%m%d`

	for FILE in $BACKUP_DIR/$HOST/${HOST}_${DIR}_INC*
	do
		# Grab the date from our file and see if it
		# is older than the date we should keep around.
		# This makes our deletion based no the timestamp
		# we encode in the filename and not a filesystem
		# attribute.
		if [ -f $FILE ]; then
			FILEDATE=`echo $FILE | cut -d_ -f4 | cut -d. -f1`
			if [ $FILEDATE -lt $LASTDATE ]; then
				rm -f $FILE
				logit 2 "Deleting old backup file:  $FILE"
			fi
		fi
	done
}

#
# MAIN
#

# we have to have the master configuration file to run.
if [ -f $CONF_DIR/master.conf ]; then
	. $CONF_DIR/master.conf
	logit 4 "Loaded $CONF_DIR/master.conf"
else
	echo "$CONF_DIR/master.conf is missing."
	exit
fi

# if we were called with a specific backup set, get
# that config.  This config can overwrite variables
# from master.conf, but that's the idea.
#
# eventually I may convert this to use getopts so that
# there is more flexibility

SET=$1

if [ ! $SET ]; then
	usage
else
	logit 4 "Checking set $SET"
	if [ -f $CONF_DIR/${SET}.conf ]; then
		. $CONF_DIR/${SET}.conf
		logit 4 "Loaded $CONF_DIR/${SET}.conf"
	else
		echo "Set configuration file not present:  $CONF_DIR/${SET}.conf"
		exit
	fi
	if [ -f $CONF_DIR/${SET}.sked ]; then
		logit 4 "Sked file found $CONF_DIR/${SET}.sked"
	else
		echo "Set schedule file not present:  $CONF_DIR/${SET}.sked"
		exit
	fi
fi

logit 2 "Loaded configuration."

# MAIN LOOP

for LINE in `grep -v "^.*#" $CONF_DIR/$SET.sked`
do
	logit 4 "Processing sked line:  $LINE"
	# get our variables

	HOST=`echo $LINE |cut -d: -f1`
	BDIR=`echo $LINE |cut -d: -f2`
	KEEPERS=`echo $LINE |cut -d: -f3`
	EXCLUDEFILE=`echo $LINE |cut -d: -f4`
	MAC=`echo $LINE |cut -d: -f5`

	# check if EXCLUDEFILE file exists, if so, rewrite it with
	# $CONF_DIR prepended.  This also catches the case where it
	# not set and ensures that it is set to null for later use.
	if [ -f ${CONF_DIR}/${EXCLUDEFILE} ]; then
		EXCLUDEFILE=${CONF_DIR}/${EXCLUDEFILE}
		logit 4 "Excluding files based on ${EXCLUDEFILE}"
	else
		EXCLUDEFILE=""
	fi		

	# we need to get rid of any "/" in the backup dir
	# so we can create filenames with it.
	DIR=`echo $BDIR | tr / -`



	# verify/create directories for the host
	# Also clean up anything old based on KEEPERS

	if [ -d ${BACKUP_DIR}/${HOST} ]; then
		cleanold
	else
		if [ ! -d ${BACKUP_DIR}/${HOST} ]; then
			mkdir -p ${BACKUP_DIR}/${HOST}
		fi
	fi

	# if we have an old backup image, lay that
	# down so that the rsync is faster
	# This is a bit of a hack job, so should be "fixed"
	# to something more elegant.
	if [ -f ${BACKUP_DIR}/${HOST}/${HOST}_${DIR}_FULL.tar.gz ]; then
		logit 4 "Expanding existing full ${HOST}_${DIR}_FULL.tar.gz"
		OPWD=$PWD
		cd $WORK_DIR
		#cd /
		tar xzfv $BACKUP_DIR/${HOST}/${HOST}_${DIR}_FULL.tar.gz 2>&1 1>/dev/null
		cd $OPWD
	fi

	# If there is a MAC address, wake up the $HOST
	# and sleep for a little bit to make sure everytyhing
	# starts up ok.
	if [ "${MAC}" != "" ]; then
		MAC=`echo ${MAC} | tr - :`
		logit 4 "Waking ${HOST} at ${MAC}"
		${WOL} ${MAC} 2>&1 1>/dev/null
		/bin/sleep 30
	fi

	# now time to run the rsync
	logit 1 "Starting backup of $HOST:$BDIR"

	${RSYNC_PATH_L} -ab --exclude-from=${EXCLUDEFILE} --delete-excluded --delete -e "${RSYNC_SHELL}" --rsync-path=${RSYNC_PATH_R} --backup-dir=${WORK_DIR}/${HOST}_${DIR}_INC ${RSYNC_USER}@${HOST}:${BDIR}/ ${WORK_DIR}/${HOST}_${DIR}_FULL 

	logit 1 "Copy of $HOST:$BDIR done. Starting compression."

	# tar and gzip files back to backup dir
	# if there is an old full backup, get rid of it now
	# this could be dangerous -- need to check return status of the rsync.
	# if the rsync failed, then we should have already exited from this script
	rm $BACKUP_DIR/${HOST}/${HOST}_${DIR}_FULL.tar.gz
	if [ -f ${BACKUP_DIR}/${HOST}_${DIR}_FULL.tar.gz ]; then
		logit 4 "Deleting old full $BACKUP_DIR/${HOST}_${DIR}_FULL.tar.gz"
		rm $BACKUP_DIR/${HOST}_${DIR}_FULL.tar.gz
	fi

	# full
	OPWD=$PWD
	cd $WORK_DIR
	#tar -cf $BACKUP_DIR/${HOST}/${HOST}_${DIR}_FULL.tar ${HOST}_${DIR}_FULL 2>&1 1>/dev/null
	tar -cf $BACKUP_DIR/${HOST}/${HOST}_${DIR}_FULL.tar ${HOST}_${DIR}_FULL 
	cd $OPWD
	gzip $BACKUP_DIR/${HOST}/${HOST}_${DIR}_FULL.tar
	rm -rf $WORK_DIR/${HOST}_${DIR}_FULL
	logit 4 "Completed creating $BACKUP_DIR/${HOST}_${BDIR}_FULL.tar.gz"

	# incrmental
	if [ -d $WORK_DIR/${HOST}_${DIR}_INC ]; then
		OPWD=$PWD
		cd $WORK_DIR
		#tar -cf $BACKUP_DIR/${HOST}/${HOST}_${DIR}_INC_$DATE.tar ${HOST}_${DIR}_INC 2>&1 1>/dev/null
		tar -cf $BACKUP_DIR/${HOST}/${HOST}_${DIR}_INC_$DATE.tar ${HOST}_${DIR}_INC
		cd $OPWD
		gzip $BACKUP_DIR/${HOST}/${HOST}_${DIR}_INC_$DATE.tar
		rm -rf $WORK_DIR/${HOST}_${DIR}_INC
		logit 4 "Completed creating $BACKUP_DIR/${HOST}_${BDIR}_INC_${DATE}.tar.gz"
	fi

	logit 1 "Completed backup of $HOST:$BDIR"

done

