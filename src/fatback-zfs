#!/bin/sh
#
# fatback
#
# simple backup program
# Author:  Chris Gordon
# (c) 2005, 2017
#
# Nov 2009:  Implemented the following:
#	- Support for Wake On Lan
#	- Exclude files supported
# Jun 2017:  Changes to leverage ZFS storage:
#	- Let ZFS do compression and stop doing it with gzip and friends
#	- Leverage ZFS snapshots for incremental backups
#	- No longer tar up everything into a single file since this would break
#	  snapshotting and is no longer needed for compression
#	- Paths and locations more consistent with FreeBSD conventions.
#	- Remove GNU'isms

#
# VARIABLES
#

# Directory holding all of the configuration files
CONF_DIR=/usr/local/etc/fatback
DATE=$(date +%Y%m%d)

#
# FUNCTIONS
#

# print simple usage information.
usage ()
{
	echo "Usage:"
	echo "  $(basename "$0") <backup-set>"
	exit 1
}

# this does our logging.
logit()
{
	LEVEL=$1
	MESSAGE=$2

	if [ "${LEVEL}" -le "${DEBUGLEVEL}" ]; then
		if [ "${LOGFILE}" = "syslog" ]; then
			${LOGGER} -t "$(basename "$0")" -- "${MESSAGE}"
		else
			echo "$(date +%b\ %d\ %H:%M:%S) ${MESSAGE}" >> "${LOGFILE}"
		fi
	fi
}

# clean up the old incremental backup files that are no longer needed
cleanold ()
{
	BP=$(echo "$1" | sed 's|^/||')
	LASTDATE=$(date -r $(echo "$(date +%s) - (${KEEPERS} * 24 *60 *60)" | bc ) +%Y%m%d)

	for SNAPSHOT in $(zfs list -rt snapshot -o name "${BP}")
	do
		if [ "${SNAPSHOT}" = "NAME" ]; then
			continue
		fi
		if [ "${SNAPSHOT}" = "no" ]; then
			break
		fi
		# Grab the date from the snapshot name and see if it
		# is older than the date we should keep around.
		# This makes our deletion based on the timestamp
		# we encode in the snapshot
		SNAPSHOTDATE=$(echo "${SNAPSHOT}" | cut -d@ -f2)
		if [ "${SNAPSHOTDATE}" -lt "${LASTDATE}" ]; then
			# Try to destroy the old snapshot and capture the results
			RESULT=$(zfs destroy "${SNAPSHOT}" 2>&1)
			RC=$?
			if [ "${RC}" -ne 0 ]; then
				logit 1 "ERROR:  Failed to delete snapshot ${SNAPSHOT}:  ${RESULT}"
		        printf "Host: %s\nTime: %s\n\n%s" "${HOST}" "$(date)" "${RESULT}" | mail -s "Fatback Error on ${HOST}" root
			else
				logit 2 "Deleting old backup snapshot:  ${SNAPSHOT}"
			fi
		fi
	done
}

# create necessary volumes
mkpath() {
	BUPATH=$1
	FULLPATH=""

	for PART in $(echo "${BUPATH}" | tr "/" "\n"); do
		FULLPATH=${FULLPATH}/${PART}
		if [ ! -d "${FULLPATH}" ]; then
			CREATEPATH=$(echo "${FULLPATH}" | sed 's|^/||')
			RESULT=$(zfs create "${CREATEPATH}" 2>&1)
			RC=$?
			if [ "${RC}" -ne 0 ]; then
				logit 1 "ERROR:  Failed to create ${CREATEPATH}:  ${RESULT}"
				printf "Host: %s\nTime: %s\n\n%s" "${HOST}" "$(date)" "${RESULT}" | mail -s "Fatback Error on ${HOST}" root
				exit 1
			else
				logit 2 "Creating ${CREATEPATH}"
			fi
		fi
	done
}

#
# MAIN
#


# we have to have the master configuration file to run.
if [ -f "${CONF_DIR}/master.conf" ]; then
	. "${CONF_DIR}/master.conf"
	logit 4 "Loaded ${CONF_DIR}/master.conf"
else
	echo "$CONF_DIR/master.conf is missing."
	exit
fi

logit 1 "Starting fatback"

# if we were called with a specific backup set, get
# that config.  This config can overwrite variables
# from master.conf, but that's the idea.
#
# eventually I may convert this to use getopts so that
# there is more flexibility

SET=$1

if [ ! "${SET}" ]; then
	usage
else
	logit 4 "Checking set ${SET}"
	if [ -f "${CONF_DIR}/${SET}.conf" ]; then
		. "${CONF_DIR}/${SET}.conf"
		logit 4 "Loaded ${CONF_DIR}/${SET}.conf"
	else
		echo "Set configuration file not present:  ${CONF_DIR}/${SET}.conf"
		exit
	fi
	if [ -f "${CONF_DIR}/${SET}.sked" ]; then
		logit 4 "Sked file found ${CONF_DIR}/${SET}.sked"
	else
		echo "Set schedule file not present:  ${CONF_DIR}/${SET}.sked"
		exit
	fi
fi

logit 2 "Loaded configuration."

# make sure all zfs file systems are mounted.  This is really to catch
# external USB drive used for external backups.
/sbin/zfs mount -a

# MAIN LOOP

for LINE in $(grep -v "^.*#" "${CONF_DIR}/${SET}.sked")
do
	logit 4 "Processing sked line:  $LINE"
	# get our variables

	HOST=$(echo "${LINE}" |cut -d: -f1)
	BDIR=$(echo "${LINE}" |cut -d: -f2)
	KEEPERS=$(echo "${LINE}" |cut -d: -f3)
	EXCLUDEFILE=$(echo "${LINE}" |cut -d: -f4)
	MAC=$(echo "${LINE}" |cut -d: -f5)

	# check if EXCLUDEFILE file exists, if so, rewrite it with
	# $CONF_DIR prepended.  This also catches the case where it
	# not set and ensures that it is set to null for later use.
	if [ -f "${CONF_DIR}/${EXCLUDEFILE}" ]; then
		EXCLUDEFILE="${CONF_DIR}/${EXCLUDEFILE}"
		logit 4 "Excluding files based on ${EXCLUDEFILE}"
	else
		EXCLUDEFILE=""
	fi

	# we need to get rid of any "/" in the backup dir
	# so we can create filenames with it.
	DIR="$(echo ${BDIR} | sed 's|/|-|g' | sed 's|-||')"

	# BUPATH is the entire path for backups put together in one variable
	# to make things easier and more readable later on.
	BUPATH=${BACKUP_DIR}/${SET}/${HOST}/${DIR}

	# verify/create filesystems for the host
	# Also clean up anything old based on KEEPERS

	if [ -d "${BUPATH}" ]; then
		cleanold ${BUPATH}
	else
		if [ ! -d ${BUPATH} ]; then
			mkpath ${BUPATH}
		fi
	fi

	# If there is a MAC address, wake up the $HOST
	# and sleep for a little bit to make sure everytyhing
	# starts up ok.
	if [ -f "${WOL}" ]; then
		if [ "${MAC}" != "" ]; then
			MAC=$(echo "${MAC}" | tr - :)
			logit 4 "Waking ${HOST} at ${MAC}"
			${WOL} ${MAC} 2>&1 1>/dev/null
			/bin/sleep 30
		fi
	fi

	# Create snapshot for today
	DATASET_NAME="$(echo "${BUPATH}" | sed 's|/||')"
	RESULT=$(zfs snapshot ${DATASET_NAME}@${DATE} 2>&1)
	RC=$?
	if [ "${RC}" -ne 0 ]; then
		logit 1 "ERROR:  Failed to create snapshot ${DATASET_NAME}@${DATE}:  ${RESULT}"
		printf "Host: %s\nTime: %s\n\n%s" "${HOST}" "$(date)" "${RESULT}" | mail -s "Fatback Error on ${HOST}" root
	else
		logit 1 "Creating current snapshot"
	fi

	# now time to run the rsync
	logit 1 "Starting backup of $HOST:$BDIR"
	RESULT=$(${RSYNC_PATH_L} -a --exclude-from=${EXCLUDEFILE} --delete-excluded --delete  --rsync-path=${RSYNC_PATH_R}  ${RSYNC_USER}@${HOST}:${BDIR}/ ${BUPATH} 2>&1)
	RC=$?
	if [ "${RC}" -ne 0 ]; then
		logit 1 "ERROR:  rsync failed:  ${RESULT}"
		printf "Host: %s\nTime: %s\n\n%s" "${HOST}" "$(date)" "${RESULT}" | mail -s "Fatback Error on ${HOST}" root
	else
		logit 1 "Copy of $HOST:$BDIR done"
	fi

	logit 1 "Completed backup of $HOST:$BDIR"
done

logit 1 "Fatback run complete"

exit 0
